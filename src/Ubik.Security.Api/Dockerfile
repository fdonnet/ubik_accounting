# See https://aka.ms/customizecontainer to learn how to customize your debug container and how Visual Studio uses this Dockerfile to build your images for faster debugging.

# This stage is used when running from VS in fast mode (Default for Debug configuration)
FROM mcr.microsoft.com/dotnet/aspnet:9.0 AS base
USER app
WORKDIR /app
EXPOSE 8080
EXPOSE 8081


# This stage is used to build the service project
FROM mcr.microsoft.com/dotnet/sdk:9.0 AS build
ARG BUILD_CONFIGURATION=Release
WORKDIR /
COPY ["src/Ubik.Security.Api/Ubik.Security.Api.csproj", "src/Ubik.Security.Api/"]
COPY ["src/Ubik.Db.Common/Ubik.DB.Common/Ubik.DB.Common.csproj", "src/Ubik.Db.Common/Ubik.DB.Common/"]
COPY ["src/Ubik.ApiService.Common/Ubik.ApiService.Common.csproj", "src/Ubik.ApiService.Common/"]
COPY ["src/Ubik.Security.Contracts/Ubik.Security.Contracts.csproj", "src/Ubik.Security.Contracts/"]
#COPY ["src/mycert.cer", "src/"]
#ADD ./src/mycert.cer /usr/local/share/ca-certificates/mycert.cer
#ADD ./src/mycert.cer /etc/ssl/certs/mycert.cer
#RUN chmod 644 /usr/local/share/ca-certificates/mycert.cer && update-ca-certificates
RUN dotnet restore "./src/Ubik.Security.Api/Ubik.Security.Api.csproj"
COPY . .
WORKDIR "/src/Ubik.Security.Api"
RUN dotnet build "./Ubik.Security.Api.csproj" -c $BUILD_CONFIGURATION -o /app/build

# This stage is used to publish the service project to be copied to the final stage
FROM build AS publish
ARG BUILD_CONFIGURATION=Release
RUN dotnet publish "./Ubik.Security.Api.csproj" -c $BUILD_CONFIGURATION -o /app/publish /p:UseAppHost=false

# This stage is used in production or when running from VS in regular mode (Default when not using the Debug configuration)
FROM base AS final
WORKDIR /app
COPY --from=publish /app/publish .
ENTRYPOINT ["dotnet", "Ubik.Security.Api.dll"]
