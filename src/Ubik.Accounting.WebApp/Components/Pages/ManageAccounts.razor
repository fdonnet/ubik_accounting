@page "/booking-accounts"
@using Ubik.Accounting.WebApp.Client.Components.Accounts
@using Ubik.Accounting.WebApp.Client.Components.Authorization
@using Ubik.Accounting.WebApp.Security
@inject UserService userService; 
@attribute [Authorize]

<PageScript Src="./js/theme-switcher.js" />
<PageTitle>Manage accounts</PageTitle>
<h1>Manage booking accounts</h1>

@if (_isReadAuthorized || _isWriteAuthorized)
{
    if (!_isWriteAuthorized)
    {
        <ReadOnlyRightPanel />
    }

    <p class="mb-2">Manage the accounts used by your accounting system.</p>
    <p class="mb-5">See the classification section if you want to define how the accounts are structured.</p>

    <AccountsModuleContainer IsAuthorizedToRead="@_isReadAuthorized" IsAuthorizedToModify="@_isWriteAuthorized"></AccountsModuleContainer>
}
else
{
    <NoRightPanel/>
}

@code {
    private bool _isWriteAuthorized;
    private bool _isReadAuthorized;
    [CascadingParameter]
    private Task<AuthenticationState>? _authenticationState { get; set; }

    protected override async Task OnInitializedAsync()
    {
        if (_authenticationState is not null)
        {
            var auth = await _authenticationState;

            _isWriteAuthorized = userService.GetUser();
            _isReadAuthorized = auth.User.IsInRole("ubik_accounting_account_read");
        }
    }
}

