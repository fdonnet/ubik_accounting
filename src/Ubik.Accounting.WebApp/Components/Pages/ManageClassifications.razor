@page "/manage-classifications"
@using Ubik.Accounting.WebApp.Client.Components.Classifications
@using Ubik.Accounting.WebApp.Client.Components.Authorization
@using Ubik.Accounting.WebApp.Security
@inject UserService userService;
@attribute [Authorize]

<PageScript Src="./js/theme-switcher.js" />
<PageTitle>Manage classifications</PageTitle>
<h1>Manage classifications</h1>

@if (_isReadAuthorized || _isWriteAuthorized)
{
    if (!_isWriteAuthorized)
    {
        <ReadOnlyRightPanel />
    }

    <p class="mb-2">Manage the classifications used by your accounting system.</p>
    <p class="mb-5">It defines the account groups structure and how your booking accounts are presented.</p>
    <p class="mb-2">You can have multiple classifications used for different purposes.</p>
    <p class="mb-5">To be ready, your classification needs to have all the accounts attached to it.</p>

    <ClassificationsModuleContainer IsAuthorizedToRead="@_isReadAuthorized" IsAuthorizedToModify="@_isWriteAuthorized"></ClassificationsModuleContainer>
}
else
{
    <NoRightPanel />
}

@code {
    private bool _isWriteAuthorized;
    private bool _isReadAuthorized;
    [CascadingParameter]
    private Task<AuthenticationState>? _authenticationState { get; set; }

    protected override async Task OnInitializedAsync()
    {
        _isWriteAuthorized = false;
        _isReadAuthorized = false;

        if (_authenticationState is not null)
        {
            var auth = await _authenticationState;

            var user = await userService.GetUserInfo();
            if (user.SelectedTenantId != null)
            {
                if (user.AuthorizationsByTenantIds.TryGetValue((Guid)user.SelectedTenantId, out var authorizationsList))
                {
                    List<string> writeRequierement = ["accounting_classification_write", "accounting_account_write", "accounting_accountgroup_write"];
                    List<string> readRequierement = ["accounting_classification_read", "accounting_account_read", "accounting_accountgroup_read"];

                    _isWriteAuthorized = !writeRequierement.Except(authorizationsList.Select(a => a.Code)).Any();
                    _isReadAuthorized = !readRequierement.Except(authorizationsList.Select(a => a.Code)).Any();
                }
            }
        }
    }
}
