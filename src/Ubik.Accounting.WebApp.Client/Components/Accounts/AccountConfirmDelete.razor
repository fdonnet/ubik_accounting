@using Ubik.Accounting.WebApp.Client.Components.Common.Alerts;
@using Ubik.Accounting.WebApp.Client.Components.Common.Buttons;
@using Ubik.Accounting.Webapp.Shared.Facades

@inject IAccountingApiClient Client

<div class="p-4 md:p-5 text-center">
    <svg class="mx-auto mb-4 text-gray-400 w-12 h-12 dark:text-gray-200" aria-hidden="true" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 20 20">
        <path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M10 11V6m0 8h.01M19 10a9 9 0 1 1-18 0 9 9 0 0 1 18 0Z" />
    </svg>
    <h3 class="mb-5 text-lg font-normal text-gray-500 dark:text-gray-400">Are you sure you want to delete this account (@Account.Code) ?</h3>
    <UbikButtonDelete @ref="_buttonDelete" Label="Yes, I'm sure" OnClick="ConfirmDeleteAsync"></UbikButtonDelete>
    <button @onclick="() => CloseAsync(false)" type="button" class="text-gray-500 bg-white hover:bg-gray-100 focus:ring-4 focus:outline-none focus:ring-gray-200 rounded-lg border border-gray-200 text-sm font-medium px-5 py-2.5 hover:text-gray-900 focus:z-10 dark:bg-gray-700 dark:text-gray-300 dark:border-gray-500 dark:hover:text-white dark:hover:bg-gray-600 dark:focus:ring-gray-600">No, cancel</button>
    <div class="flex flex-col mt-3">
        <MsgSuccess @ref="_successMsg" SuccessMessage="please wait, this window is closing ..."></MsgSuccess>
        <ErrBackendApi @ref="_backendErrorMsg" MainErrorMsg="Cannot delete."></ErrBackendApi>
    </div>
</div>

@code {
    [CascadingParameter(Name = "AccountModel")]
    public AccountModel Account { get; set; } = default!;
    [Parameter]
    public EventCallback<bool> OnClose { get; set; }

    private ErrBackendApi _backendErrorMsg = default!;
    private MsgSuccess _successMsg = default!;
    private UbikButtonDelete _buttonDelete = default!;

    private async Task CloseAsync(bool withRefresh = false)
    {
        await OnClose.InvokeAsync(withRefresh);
    }

    private async Task ConfirmDeleteAsync()
    {
        await _backendErrorMsg.DismissErrorAsync();
        await _buttonDelete.LoadingStateAsync();
        var response = await Client.DeleteAccountAsync(Account.Id);
        await _buttonDelete.LoadingStateFinishedAsync();

        if (response != null && response.IsSuccessStatusCode)
        {
            await _successMsg.ShowSuccessAsync();
            StateHasChanged();
            await Task.Delay(1500);

            //I don't understand why I need to call the hide method here
            //If not, the message remains when another delete action is called = strange
            //Don't seem to have the same behavior with other dialogs, need to investigate
            //Explanation can be that it is a component without a Form and no real submit occurs... (YES maybe)
            await _successMsg.HideSuccessAsync();
            await CloseAsync(true);
        }
        else
        {
            await _backendErrorMsg.ShowErrorAsync(response);
            StateHasChanged();
        }
    }
}
