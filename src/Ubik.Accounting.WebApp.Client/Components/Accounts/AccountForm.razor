@using Ubik.Accounting.Contracts.Accounts.Enums;
@using Ubik.Accounting.Contracts.Currencies.Results

<EditForm Model="@Account" OnSubmit="Submit" FormName="AddAccount" class="p-4 md:p-5">
    <DataAnnotationsValidator />
    <div class="grid gap-4 mb-4 grid-cols-2">
        <div class="col-span-2 sm:col-span-1">
            <UbikInputText Id="AccountCode" Label="Code"
                           PlaceholderText="Type a code (max 20 char.)" Type="text" @bind-Value="Account.Code"
                           ValidationFor="@(()=>Account.Code)"></UbikInputText>
        </div>
        <div class="col-span-2 sm:col-span-1">
            <UbikInputSelect Id="AccountCcy" TValue="Guid?"
                             ValueExpression="@(() => Account.CurrencyId)" Value="@Account.CurrencyId"
                             ValueChanged="@((Guid? args) => Account.CurrencyId = args)"
                             Label="Currency" PlaceholderText="Select a currency..."
                             ValidationFor="@(()=>Account.CurrencyId)" Data="CurrenciesList" DataKey="Id" DataValue="IsoCode"></UbikInputSelect>
        </div>
        <div class="col-span-2">
            <UbikInputText Id="AccountLabel" Label="Label"
                           PlaceholderText="Type a label (max 100 char.)" Type="text" @bind-Value="Account.Label"
                           ValidationFor="@(()=>Account.Label)"></UbikInputText>
        </div>
        <div class="col-span-2 sm:col-span-1">
            <UbikInputSelect Id="AccountDomain" TValue="AccountDomain?"
                             ValueExpression="@(() => Account.Domain)" Value="@Account.Domain"
                             ValueChanged="@((AccountDomain? args) => Account.Domain = args)"
                             Label="Domain" PlaceholderText="Select a domain..."
                             ValidationFor="@(()=>Account.Domain)"></UbikInputSelect>
        </div>
        <div class="col-span-2 sm:col-span-1">
            <UbikInputSelect Id="AccountCategory" TValue="AccountCategory?"
                             ValueExpression="@(() => Account.Category)" Value="@Account.Category"
                             ValueChanged="@((AccountCategory? args) => Account.Category = args)"
                             Label="Category" PlaceholderText="Select a category..."
                             ValidationFor="@(()=>Account.Category)"></UbikInputSelect>
        </div>
        <div class="col-span-2">
            <UbikInputTextArea Id="AccountDescription" Label="Description"
                               PlaceholderText="Type a description (max 700 char.)" @bind-Value="Account.Description"
                               ValidationFor="@(()=>Account.Description)"></UbikInputTextArea>
        </div>
    </div>
    <button type="submit" class="mt-4 text-white inline-flex items-center bg-blue-700 hover:bg-blue-800 focus:ring-4 focus:outline-none focus:ring-blue-300 font-medium rounded-lg text-sm px-5 py-2.5 text-center dark:bg-blue-600 dark:hover:bg-blue-700 dark:focus:ring-blue-800">
        <svg class="me-1 -ms-1 w-5 h-5" fill="currentColor" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"><path fill-rule="evenodd" d="M10 5a1 1 0 011 1v3h3a1 1 0 110 2h-3v3a1 1 0 11-2 0v-3H6a1 1 0 110-2h3V6a1 1 0 011-1z" clip-rule="evenodd"></path></svg>
        Add new account
    </button>
</EditForm>

@code {
    [CascadingParameter(Name = "AccountModel")]
    public AccountModel Account { get; set; } = default!;
    [Parameter]
    public IEnumerable<GetAllCurrenciesResult> CurrenciesList { get; set; } = default!;

    private void Submit(EditContext editContext)
    {
        var valid = editContext.Validate();
        Console.WriteLine(CurrenciesList);
        Console.WriteLine(Account!.Code);
        Console.WriteLine(Account!.CurrencyId);
        Console.WriteLine(Account!.Label);
        Console.WriteLine(Account!.Category);
        Console.WriteLine(Account!.Domain);
        Console.WriteLine(Account!.Description);
    }

}
