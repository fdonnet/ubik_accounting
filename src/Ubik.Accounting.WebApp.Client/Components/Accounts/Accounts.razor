@implements IDisposable
@using Ubik.Accounting.Contracts.Accounts.Results
@using Ubik.Accounting.Webapp.Shared.Facades
@inject IAccountingApiClient Client
@inject PersistentComponentState ApplicationState

@* @rendermode _rendermode
 *@

@attribute [Authorize]
<h3>AccoutsList</h3>

<div class="relative overflow-x-auto shadow-md sm:rounded-lg">
    <table class="w-full text-sm text-left rtl:text-right text-gray-500 dark:text-gray-400">
        <thead class="text-xs text-gray-700 uppercase bg-gray-50 dark:bg-gray-700 dark:text-gray-400">
            <tr>
                <th scope="col" class="px-6 py-3">
                    Code
                </th>
                <th scope="col" class="px-6 py-3">
                    Label
                </th>
                <th scope="col" class="px-6 py-3">
                    Description
                </th>
            </tr>
        </thead>
        <tbody>
            @if (_accounts != null)
            {
                @foreach (var a in _accounts)
                {
                    <tr class="bg-white border-b dark:bg-gray-800 dark:border-gray-700">
                        <th scope="row" class="px-6 py-4 font-medium text-gray-900 whitespace-nowrap dark:text-white">
                            @a.Code
                        </th>
                        <td class="px-6 py-4">
                            @a.Label
                        </td>
                        <td class="px-6 py-4">
                            @a.Description
                        </td>
                    </tr>
                }
            }
            else
            {
                <tr class="bg-white border-b dark:bg-gray-800 dark:border-gray-700">
                    <td colspan="3" class="w-full">Loading...</td>
                </tr>
            }
        </tbody>
    </table>
</div>


<button class="btn btn-primary" @onclick="SayHello">SayHello</button>
@_error

@code {
    private IEnumerable<GetAllAccountsResult>? _accounts;
    private string? _error;
    // private static IComponentRenderMode _rendermode = new InteractiveAutoRenderMode(prerender: false);
    private PersistingComponentStateSubscription persistingSubscription;
    [CascadingParameter]
    private Task<AuthenticationState>? authenticationState { get; set; }


    protected override async Task OnInitializedAsync()
    {
        persistingSubscription =
            ApplicationState.RegisterOnPersisting(PersistData);

        if (authenticationState is not null)
        {
            await authenticationState;
            if (!ApplicationState.TryTakeFromJson<IEnumerable<GetAllAccountsResult>>(
                "TEST", out var restored))
            {
                await Task.Delay(2000);
                await SayHello();
            }
            else
            {
                _accounts = restored!;
            }


            // var client = Factory.CreateClient("WebApp");
            // _accounts = await client.GetFromJsonAsync<IEnumerable<GetAllAccountsResult>>("/Accountslist") ?? [];
            //_accounts = await ClientContacts.GetAllAccountsAsync();
            // if (isAuthenticated == true)
            // {
            //     // @if (RenderContext.IsClient)
            //     // {
            //     //     var client = Factory.CreateClient("WebApp");
            //     //     var test = await client.GetStringAsync("/Hello");
            //     // }
            //     // else
            //     // {
            //     //     // Render me only on Server. No HTTP calls.
            //     // }
            //     //_accounts = await ClientContacts.GetAllAccountsAsync();
            //     //StateHasChanged();
            // }
        }
    }
    private Task PersistData()
    {
        ApplicationState.PersistAsJson("TEST", _accounts);

        return Task.CompletedTask;
    }
    private async Task SayHello()
    {
        var response = await Client.GetAllAccountsAsync();

        if (response.IsSuccessStatusCode)
        {
            _accounts = await response.Content.ReadFromJsonAsync<IEnumerable<GetAllAccountsResult>>();
        }
        else
        {
            //TODO: IMPLEMENT ERROR HANDLING for PROBLEM DETAILS (and global exception handler)
            _error = response.StatusCode.ToString();

        }


        //StateHasChanged();
    }


    void IDisposable.Dispose()
    {
        persistingSubscription.Dispose();
    }

}
