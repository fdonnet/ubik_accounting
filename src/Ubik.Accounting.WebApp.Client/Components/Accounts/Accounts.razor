@using Ubik.Accounting.Contracts.Accounts.Results
@using Ubik.Accounting.Contracts.Error
@using Ubik.Accounting.Webapp.Shared.Facades
@using Ubik.Accounting.WebApp.Client.Components.Common.Modal
@inject IAccountingApiClient Client
@inject IRenderContext RenderContext
@attribute [Authorize]

<UbikModal>

</UbikModal>
<button type="button" class="font-semibold text-white bg-blue-700 hover:bg-blue-800 focus:ring-4 focus:ring-blue-300 font-medium rounded-lg text-sm px-5 py-2.5 me-2 mb-2 dark:bg-blue-600 dark:hover:bg-blue-700 focus:outline-none dark:focus:ring-blue-800">Add</button>
<div class="relative overflow-x-auto shadow-md sm:rounded-lg max-w-max">
    <table class="w-full text-sm text-left rtl:text-right text-gray-500 dark:text-gray-400">
        <thead class="text-xs text-gray-700 uppercase bg-gray-100 dark:bg-gray-700 dark:text-gray-400">
            <tr>
                <th scope="col" class="px-6 py-3">
                    Code
                </th>
                <th scope="col" class="px-6 py-3">
                    Label
                </th>
                <th scope="col" class="px-6 py-3">
                    Domain
                </th>
                <th scope="col" class="px-6 py-3">
                    Category
                </th>
                <th scope="col" class="px-6 py-3">
                    Description
                </th>
                <th scope="col" class="px-6 py-3">

                </th>
                <th scope="col" class="py-4 py-3">

                </th>
            </tr>
        </thead>
        <tbody>
            @if (!isLoading && _accounts != null)
            {
                @foreach (var a in _accounts)
                {
                    <tr class="bg-white border-b dark:bg-gray-800 dark:border-gray-700">
                        <th scope="row" class="px-6 py-4 font-medium text-gray-900 whitespace-nowrap dark:text-white">
                            @a.Code
                        </th>
                        <td class="px-6 py-4">
                            @a.Label
                        </td>
                        <td class="px-6 py-4">
                            @a.Domain
                        </td>
                        <td class="px-6 py-4">
                            @a.Category
                        </td>
                        <td class="px-6 py-4">
                            @a.Description
                        </td>
                        <td class="py-4 py-3">
                            <a href="#" class="font-medium text-blue-600 dark:text-blue-500 hover:underline">Edit</a>
                        </td>
                        <td class="py-4 py-3">
                            <a href="#" class="font-medium text-blue-600 dark:text-blue-500 hover:underline pr-4">Delete</a>
                        </td>
                    </tr>
                }
            }
            else
            {
                <tr class="bg-white border-b dark:bg-gray-800 dark:border-gray-700">
                    <td colspan="7" class="w-full text-center">Loading...</td>
                </tr>
            }
        </tbody>
    </table>
</div>
@* 
@if(_error is not null)
{
    @_error
    @_error.Errors[0]
} *@

@code {
    private IQueryable<GetAllAccountsResult>? _accounts;
    private ProblemDetailsContract? _error;
    [CascadingParameter]
    private Task<AuthenticationState>? authenticationState { get; set; }
    private bool isLoading = true;

    protected override async Task OnInitializedAsync()
    {
        if (RenderContext.IsPrerendering)
        {
            return;
        }

        if (authenticationState is not null)
        {
            await authenticationState;
            await LoadAccountsAsync();
        }
    }

    private async Task LoadAccountsAsync()
    {
        isLoading = true;
        var response = await Client.GetAllAccountsAsync();
        //var responseAccountTest = await Client.GetAccountAsync(Guid.NewGuid());

        if (response.IsSuccessStatusCode)
        {
            var result = await response.Content.ReadFromJsonAsync<IEnumerable<GetAllAccountsResult>>() ?? [];
            _accounts = result.AsQueryable();
            
        }
        else
        {
            //TODO: IMPLEMENT ERROR HANDLING for PROBLEM DETAILS (and global exception handler)
            //_error = await responseAccountTest.Content.ReadFromJsonAsync<ProblemDetailsContract>();
        }
        isLoading = false;
    }
}
