@using Ubik.Accounting.Contracts.Accounts.Results
@using Ubik.Accounting.Contracts.Currencies.Results
@using Ubik.Accounting.Contracts.Error
@using Ubik.Accounting.Webapp.Shared.Facades
@using Ubik.Accounting.WebApp.Client.Components.Common.Modal
@using Ubik.Accounting.WebApp.Client.Components.Common.Grid

@inject IAccountingApiClient Client
@inject IRenderContext RenderContext
@attribute [Authorize]
@rendermode InteractiveAuto

<button type="button" @onclick="AddAccountDialog" class="font-semibold text-white bg-blue-700 hover:bg-blue-800 focus:ring-4 focus:ring-blue-300 rounded-lg text-sm px-5 py-2.5 me-2 mb-2 dark:bg-blue-600 dark:hover:bg-blue-700 focus:outline-none dark:focus:ring-blue-800">Add</button>
<CascadingValue Name="AccountModel" Value="@_accountCurrent">
    <UbikModal @ref="_modal" ButtonLabel="Add" DialogTitle="Add an account" CloseOnClickOutisde="false">
        <AccountForm CurrenciesList="_currencies" OnClose="CloseDialog"></AccountForm>
    </UbikModal>
</CascadingValue>

<div class="relative overflow-x-auto shadow-md sm:rounded-lg max-w-max">
    <UbikGrid Items="@_accounts" TGridItem="AccountModel" FieldNames="@_gridAccountFields" EditAndRemoveButton="true" OnEditItem="EditAccountDialog">

    </UbikGrid>
</div>

@*
@if(_error is not null)
{
    @_error
    @_error.Errors[0]
} *@

@code {
    private IQueryable<AccountModel>? _accounts;
    private IEnumerable<GetAllCurrenciesResult>? _currencies;
    private ProblemDetailsContract? _error;
    [CascadingParameter]
    private Task<AuthenticationState>? _authenticationState { get; set; }
    private bool _isLoading = true;
    private UbikModal _modal = default!;
    private AccountModel _accountCurrent = new();
    private List<string> _gridAccountFields = new() { "Code", "Label", "Domain", "Category" };

    protected override async Task OnInitializedAsync()
    {
        if (RenderContext.IsPrerendering)
        {
            return;
        }

        if (_authenticationState is not null)
        {
            await _authenticationState;
            await LoadAccountsAsync();
        }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await LoadCurrenciesAsync();
        }
    }

    private async Task EditAccountDialog(AccountModel currentAccount)
    {
        _accountCurrent = currentAccount;
        await _modal.ShowDialog();
    }

    private async Task AddAccountDialog()
    {
        _accountCurrent = new();
        await _modal.ShowDialog();
    }

    private async Task CloseDialog()
    {
        await _modal.CloseDialog();
    }

    private async Task LoadAccountsAsync()
    {
        _isLoading = true;
        var response = await Client.GetAllAccountsAsync();

        if (response.IsSuccessStatusCode)
        {
            var result = (await response.Content.ReadFromJsonAsync<IEnumerable<GetAllAccountsResult>>() ?? []).ToAccountModel();
            _accounts = result.AsQueryable();
        }
        else
        {
            //TODO: IMPLEMENT ERROR HANDLING for PROBLEM DETAILS (and global exception handler)
            //_error = await responseAccountTest.Content.ReadFromJsonAsync<ProblemDetailsContract>();
        }
        _isLoading = false;
    }

    //TODO: see to load that at the correct time to avoid reloading
    private async Task LoadCurrenciesAsync()
    {
        var response = await Client.GetAllCurrenciesAsync();

        if (response.IsSuccessStatusCode)
        {
            _currencies = (await response.Content.ReadFromJsonAsync<IEnumerable<GetAllCurrenciesResult>>() ?? []);
        }
        else
        {
            //TODO: IMPLEMENT ERROR HANDLING for PROBLEM DETAILS (and global exception handler)
            //_error = await responseAccountTest.Content.ReadFromJsonAsync<ProblemDetailsContract>();
        }
    }
}
