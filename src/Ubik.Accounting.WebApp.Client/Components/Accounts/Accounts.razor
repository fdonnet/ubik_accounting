@using Ubik.Accounting.Contracts.Accounts.Results
@using Ubik.Accounting.Contracts.Currencies.Results
@using Ubik.Accounting.Contracts.Error
@using Ubik.Accounting.Webapp.Shared.Facades
@using Ubik.Accounting.WebApp.Client.Components.Common.Modal
@using Ubik.Accounting.WebApp.Client.Components.Common.Grid
@using Ubik.Accounting.WebApp.Client.Components.Common.Buttons
@using Ubik.Accounting.WebApp.Client.Components.Common.Grid.Columns
@using Ubik.Accounting.WebApp.Client.Components.Common.Grid.Pagination
@using Ubik.Accounting.WebApp.Client.Components.Common.Alerts
@using Ubik.Accounting.Contracts.Accounts.Enums

@inject IAccountingApiClient Client
@inject IRenderContext RenderContext

@if (IsAuthorizedToRead)
{
    <ErrBackendApi MainErrorMsg="Cannot retrieve all the necessary data" @ref="_backendErrorMsg"></ErrBackendApi>

    <div class="flex flex-col max-w-max mt-1">
        <div class="flex justify-between">
            <div>
                @if (IsAuthorizedToModify)
                {
                    <UbikButton Type="button" Label="Add" AdditionalCssClass="mb-2" IsDisabled=@_isButtonsDisabled OnClick="AddAccountDialogAsync"></UbikButton>
                }
            </div>
            <div>
                <UbikButtonAlternative IsPurple="@_accountFilters.IsFiltersApplied" Type="button" Label="Filters" IsDisabled=@_isButtonsDisabled AdditionalCssClass="mb-2" OnClick="OpenCloseFilterView"></UbikButtonAlternative>
            </div>
        </div>

        <AccountFilters @ref="_filters" CurrenciesList="_currencies" Filters="@_accountFilters" OnApplyFilters="ApplyFilters"></AccountFilters>

        @if (IsAuthorizedToModify)
        {
            <CascadingValue Name="AccountModel" Value="@_accountCurrent">
                <UbikModal @ref="_dialog" ButtonLabel="Add" DialogTitle="@_dialogTitle" CloseOnClickOutisde="false">
                    <AccountForm CurrenciesList="_currencies" EditMode="@_editMode" OnClose="CloseDialogAsync"></AccountForm>
                </UbikModal>
                <UbikModalCenter @ref="_deleteDialog">
                    <AccountConfirmDelete @ref="_deleteMsg" OnClose="CloseDeleteDialogAsync"></AccountConfirmDelete>
                </UbikModalCenter>
            </CascadingValue>
        }

        <div class="relative overflow-x-auto shadow-md sm:rounded-lg">
            <UbikGrid Items="@_filteredAccounts" TGridItem="AccountModel" HighlightFirstColumn="true" Pagination="@pagination">
                <UbikColumnProperty Title="Code" Property="@(a=> a.Code)" Sortable="true" IsDefaultSortColumn="true" InitialSortDirection="SortDirection.Ascending"></UbikColumnProperty>
                <UbikColumnProperty Title="Label" Property="@(a=> a.Label)" Sortable="true"></UbikColumnProperty>
                <UbikColumnProperty Title="Domain" Property="@(a=> a.Domain)" Sortable="true"></UbikColumnProperty>
                <UbikColumnProperty Title="Category" Property="@(a=> a.Category)" Sortable="true"></UbikColumnProperty>
                @if (IsAuthorizedToModify)
                {
                    <UbikTemplateColumnTemplateColumn Sortable="false" Title="" SmallXPadding="true">
                        <UbikButtonLink Type="button" Label="Edit" TItem="AccountModel" OnClick="@(()=>EditAccountDialogAsync(context))"></UbikButtonLink>
                    </UbikTemplateColumnTemplateColumn>
                    <UbikTemplateColumnTemplateColumn Sortable="false" Title="" SmallXPadding="true">
                        <UbikButtonLink Type="button" Label="Delete" TItem="AccountModel" OnClick="@(()=>DeleteConfirmation(context))"></UbikButtonLink>
                    </UbikTemplateColumnTemplateColumn>
                }
            </UbikGrid>
        </div>
        @if (_numberOfAccounts != -1 && _numberOfAccounts > ITEMS_PER_PAGE)
        {
            <div class="mt-3 text-sm">
                <UbikPaginator State="@pagination" />
            </div>
        }
    </div>

}

@code {
    private const int ITEMS_PER_PAGE = 10;

    [Parameter]
    public bool IsAuthorizedToRead { get; set; } = false;
    [Parameter]
    public bool IsAuthorizedToModify { get; set; } = false;

    private IQueryable<AccountModel>? _accounts;
    private int _numberOfAccounts = -1;
    private IEnumerable<GetAllCurrenciesResult>? _currencies;

    private bool _isLoading = true;
    private UbikModal _dialog = default!;
    private UbikModalCenter _deleteDialog = default!;
    private ErrBackendApi _backendErrorMsg = default!;
    private AccountConfirmDelete _deleteMsg = default!;
    private AccountModel _accountCurrent = new();

    private bool _editMode = false;
    private string _dialogTitle = "Add account";

    private AccountFiltersModel _accountFilters = new();
    private AccountFilters _filters = default!;

    private IQueryable<AccountModel>? _filteredAccounts
    {
        get
        {
            if (_accounts == null || !_accountFilters.IsFiltersApplied)
                return _accounts;

            var result = _accounts;

            if (_accountFilters.CurrencyFilter != null)
                result = result.Where(a => a.CurrencyId == _accountFilters.CurrencyFilter);

            if (_accountFilters.DomainFilter != null)
                result = result.Where(a => a.Domain == _accountFilters.DomainFilter);

            if (_accountFilters.CategoryFilter != null)
                result = result.Where(a => a.Category == _accountFilters.CategoryFilter);

            return result;
        }
    }

    private bool _isButtonsDisabled
    {
        get
        {
            return _isLoading || RenderContext.IsPrerendering;
        }
    }

    PaginationState pagination = new PaginationState { ItemsPerPage = ITEMS_PER_PAGE };


    protected override async Task OnInitializedAsync()
    {
        if (RenderContext.IsPrerendering)
        {
            return;
        }

        await LoadAccountsAsync();
        await LoadCurrenciesAsync();
    }

    private async Task EditAccountDialogAsync(AccountModel currentAccount)
    {
        _dialogTitle = $"Edit account ({currentAccount.Code})";
        _editMode = true;
        _accountCurrent = currentAccount;
        await _dialog.ShowDialog();
    }

    private async Task AddAccountDialogAsync()
    {
        _dialogTitle = "Add an account";
        _editMode = false;
        _accountCurrent = new();
        await _dialog.ShowDialog();
    }

    private async Task CloseDialogAsync(bool refresh = false)
    {
        if (refresh)
        {
            await LoadAccountsAsync();
        }

        await _dialog.CloseDialogAsync();
    }

    private async Task CloseDeleteDialogAsync(bool refresh = false)
    {
        if (refresh)
        {
            await LoadAccountsAsync();
        }

        await _deleteDialog.CloseDialogAsync();
    }

    private async Task LoadAccountsAsync()
    {
        _isLoading = true;

        var response = await Client.GetAllAccountsAsync();

        if (response.IsSuccessStatusCode)
        {
            var result = (await response.Content.ReadFromJsonAsync<IEnumerable<GetAllAccountsResult>>() ?? []).ToAccountModel();
            _accounts = result.AsQueryable();
            _numberOfAccounts = _accounts.Count();
        }
        else
        {
            await _backendErrorMsg.ShowErrorAsync(response);
            StateHasChanged();
        }

        _isLoading = false;
    }

    //TODO: see to load that at the correct time to avoid reloading / + use caching
    private async Task LoadCurrenciesAsync()
    {
        var response = await Client.GetAllCurrenciesAsync();

        if (response.IsSuccessStatusCode)
        {
            var result = (await response.Content.ReadFromJsonAsync<IEnumerable<GetAllCurrenciesResult>>() ?? []);
            _currencies = result.OrderBy(c => c.IsoCode);
        }
        else
        {
            await _backendErrorMsg.ShowErrorAsync(response);
            StateHasChanged();
        }
    }

    private async Task DeleteConfirmation(AccountModel currentAccount)
    {
        _accountCurrent = currentAccount;

        await _deleteMsg.SetInitialStatus();
        await _deleteDialog.ShowDialogAsync();
    }

    private async Task OpenCloseFilterView()
    {
        await _filters.OpenCloseFilters();
    }

    private void ApplyFilters()
    {
        StateHasChanged();
    }
}
