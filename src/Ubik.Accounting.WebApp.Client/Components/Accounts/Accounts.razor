@using Ubik.Accounting.Contracts.Accounts.Results
@using Ubik.Accounting.Contracts.Currencies.Results
@using Ubik.Accounting.Contracts.Error
@using Ubik.Accounting.Webapp.Shared.Facades
@using Ubik.Accounting.WebApp.Client.Components.Common.Modal
@using Ubik.Accounting.WebApp.Client.Components.Common.Grid
@using Ubik.Accounting.WebApp.Client.Components.Common.Buttons

@inject IAccountingApiClient Client
@inject IRenderContext RenderContext
@attribute [Authorize]
@rendermode InteractiveAuto

@if (IsAuthorizedToRead)
{
    @if (IsAuthorizedToModify)
    {
        <UbikButton Type="button" Label="Add" AdditionalCssClass="mb-2" OnClick="AddAccountDialog"></UbikButton>
    }

    <CascadingValue Name="AccountModel" Value="@_accountCurrent">
        <UbikModal @ref="_dialog" ButtonLabel="Add" DialogTitle="@_dialogTitle" CloseOnClickOutisde="false">
            <AccountForm CurrenciesList="_currencies" EditMode="@_editMode" OnClose="CloseDialog"></AccountForm>
        </UbikModal>
    </CascadingValue>

    <div class="relative overflow-x-auto shadow-md sm:rounded-lg max-w-max">
        <UbikGrid Items="@_accounts" TGridItem="AccountModel" FieldNames="@_gridAccountFields" EditAndRemoveButton="IsAuthorizedToModify" OnEditItem="EditAccountDialog">
            <UbikGridColumn Field="@nameof(AccountModel.Code)" Label="Code"></UbikGridColumn>
        </UbikGrid>
    </div>
}
else
{

}


@*
@if(_error is not null)
{
    @_error
    @_error.Errors[0]
} *@

@code {
    [Parameter]
    public bool IsAuthorizedToRead { get; set; } = false;
    [Parameter]
    public bool IsAuthorizedToModify { get; set; } = false;

    private IQueryable<AccountModel>? _accounts;
    private IEnumerable<GetAllCurrenciesResult>? _currencies;
    private ProblemDetailsContract? _error;

    [CascadingParameter]
    private Task<AuthenticationState>? _authenticationState { get; set; }

    private bool _isLoading = true;
    private UbikModal _dialog = default!;

    private AccountModel _accountCurrent = new();
    private List<string> _gridAccountFields = new() { "Code", "Label", "Domain", "Category" };

    private bool _editMode = false;
    private string _dialogTitle = "Add account";

    protected override async Task OnInitializedAsync()
    {
        if (RenderContext.IsPrerendering)
        {
            return;
        }

        if (_authenticationState is not null)
        {
            await _authenticationState;
            await LoadAccountsAsync();
        }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await LoadCurrenciesAsync();
        }
    }

    private async Task EditAccountDialog(AccountModel currentAccount)
    {
        _dialogTitle = $"Edit account ({currentAccount.Code})";
        _editMode = true;
        _accountCurrent = currentAccount;
        await _dialog.ShowDialog();
    }

    private async Task AddAccountDialog()
    {
        _dialogTitle = "Add an account";
        _editMode = false;
        _accountCurrent = new();
        await _dialog.ShowDialog();
    }

    private async Task CloseDialog()
    {
        await _dialog.CloseDialog();
    }

    private async Task LoadAccountsAsync()
    {
        _isLoading = true;
        var response = await Client.GetAllAccountsAsync();

        if (response.IsSuccessStatusCode)
        {
            var result = (await response.Content.ReadFromJsonAsync<IEnumerable<GetAllAccountsResult>>() ?? []).ToAccountModel();
            _accounts = result.AsQueryable();
        }
        else
        {
            //TODO: IMPLEMENT ERROR HANDLING for PROBLEM DETAILS (and global exception handler)
            //_error = await responseAccountTest.Content.ReadFromJsonAsync<ProblemDetailsContract>();
        }
        _isLoading = false;
    }

    //TODO: see to load that at the correct time to avoid reloading
    private async Task LoadCurrenciesAsync()
    {
        var response = await Client.GetAllCurrenciesAsync();

        if (response.IsSuccessStatusCode)
        {
            _currencies = (await response.Content.ReadFromJsonAsync<IEnumerable<GetAllCurrenciesResult>>() ?? []);
        }
        else
        {
            //TODO: IMPLEMENT ERROR HANDLING for PROBLEM DETAILS (and global exception handler)
            //_error = await responseAccountTest.Content.ReadFromJsonAsync<ProblemDetailsContract>();
        }
    }
}
