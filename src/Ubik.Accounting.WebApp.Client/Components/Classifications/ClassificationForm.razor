@using Ubik.Accounting.Contracts.Classifications.Results
@using Ubik.Accounting.WebApp.Client.Components.Common.Buttons
@using Ubik.Accounting.WebApp.Client.Components.Common.Alerts;
@using Ubik.Accounting.Webapp.Shared.Facades

@inject IAccountingApiClient Client

<EditForm Model="@Classification" OnSubmit="SubmitAsync" FormName="AddClassification" class="p-4 md:p-5">
    <DataAnnotationsValidator />
    <div class="grid-cols-2 mb-4 grid gap-4">
        <div class="col-span-2 sm:col-span-1">
            <UbikInputText Id="ClassCode" Label="Code"
                           PlaceholderText="Type a code (max 20 char.)" Type="text" @bind-Value="Classification.Code"
                           ValidationFor="@(()=>Classification.Code)"></UbikInputText>
        </div>
        <div class="col-span-2 sm:col-span-1">
            <UbikInputText Id="ClassificationLabel" Label="Label"
                           PlaceholderText="Type a label (max 100 char.)" Type="text" @bind-Value="Classification.Label"
                           ValidationFor="@(()=>Classification.Label)"></UbikInputText>
        </div>
        <div class="col-span-2">
            <UbikInputTextArea Id="ClassificationDescription" Label="Description"
                               PlaceholderText="Type a description (max 700 char.)" @bind-Value="Classification.Description"
                               ValidationFor="@(()=>Classification.Description)"></UbikInputTextArea>
        </div>
    </div>
    <div class="mt-3 flex justify-between sm:mt-4">
        <div>
            @if (EditMode)
            {
                <UbikButton @ref="@_buttonSubmitEdit" Type="submit" Label="Save"></UbikButton>
            }
            else
            {
                <UbikButton @ref="@_buttonSubmitAdd" Type="submit" Label="Save">
                </UbikButton>
            }
        </div>
        <div>
            <UbikButtonAlternative Type="button" Label="Close" OnClick="() => CloseAsync(false)"></UbikButtonAlternative>
        </div>
    </div>
    <div class="mt-3 sm:mt-4">
        <MsgSuccess @ref="_successMsg" SuccessMessage="please wait, this form is closing ..."></MsgSuccess>
        <ErrCannotSubmit @ref="_cannotSubmitMsg"></ErrCannotSubmit>
        <ErrBackendApi @ref="_backendErrorMsg"></ErrBackendApi>
    </div>
</EditForm>

@code {
    [CascadingParameter(Name = "ClassificationModel")]
    public ClassificationModel Classification { get; set; } = default!;
    [Parameter]
    public bool EditMode { get; set; } = false;

    [Parameter]
    public EventCallback<bool> OnClose { get; set; }

    [Parameter]
    public EventCallback<ClassificationModel> OnClassificationChange { get; set; }

    private UbikButton _buttonSubmitEdit = default!;
    private UbikButton _buttonSubmitAdd = default!;

    private ErrCannotSubmit _cannotSubmitMsg = default!;
    private ErrBackendApi _backendErrorMsg = default!;
    private MsgSuccess _successMsg = default!;

    private async Task SubmitAsync(EditContext editContext)
    {
        await CleanErrorMsg();
        await SetSendingStateAsync();

        var valid = editContext.Validate();

        if (valid)
        {
            var response = await SendDataAsync();
            await SetSendingFinishedAsync();

            if (response != null && response.IsSuccessStatusCode)
            {
                await _successMsg.ShowSuccessAsync();
                await ManageResponseReturns(response);
                StateHasChanged();
                await Task.Delay(700);

                await CloseAsync(true);
            }
            else
            {
                await _backendErrorMsg.ShowErrorAsync(response);
                StateHasChanged();
            }
        }
        else
        {
            await SetSendingFinishedAsync();
            await _cannotSubmitMsg.ShowErrorAsync();
        }
    }

    private async Task ManageResponseReturns(HttpResponseMessage response)
    {
        await ClassificationChangeAsync(await GetClassificationFromResponse(response));
    }

    private async Task<ClassificationModel> GetClassificationFromResponse(HttpResponseMessage response)
    {
        if (EditMode)
        {
            var result = await response.Content.ReadFromJsonAsync<ClassificationStandardResult>();
            if (result == null)
                throw new ArgumentNullException("Cannot access response result for edit a classification.");

            return result.ToClassificationModel();
        }
        else
        {
            var result = await response.Content.ReadFromJsonAsync<ClassificationStandardResult>();
            if (result == null)
                throw new ArgumentNullException("Cannot access response result for add a classification.");

            return result.ToClassificationModel();
        }
    }

    private async Task CleanErrorMsg()
    {
        await _cannotSubmitMsg.CloseErrorAsync();
        await _backendErrorMsg.DismissErrorAsync();
    }

    private async Task SetSendingStateAsync()
    {
        if (EditMode)
            await _buttonSubmitEdit.LoadingStateAsync();
        else
            await _buttonSubmitAdd.LoadingStateAsync();
    }

    private async Task SetSendingFinishedAsync()
    {
        if (EditMode)
            await _buttonSubmitEdit.LoadingStateFinishedAsync();
        else
            await _buttonSubmitAdd.LoadingStateFinishedAsync();
    }

    private async Task<HttpResponseMessage?> SendDataAsync()
    {
        if (EditMode)
        {
            return await Client.UpdateClassificationAsync(Classification.Id, Classification.ToUpdateClassificationCommand());
        }
        else
        {
            return await Client.AddClassificationAsync(Classification.ToAddClassificationCommand());
        }
    }

    private async Task CloseAsync(bool withRefresh = false)
    {
        await OnClose.InvokeAsync(withRefresh);
    }

    private async Task ClassificationChangeAsync(ClassificationModel classification)
    {
        await OnClassificationChange.InvokeAsync(classification);
    }
}
