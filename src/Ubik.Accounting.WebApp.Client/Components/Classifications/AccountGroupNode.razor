@using Ubik.Accounting.Contracts.Accounts.Results
@using Ubik.Accounting.Webapp.Shared.Facades

@inject IAccountingApiClient Client
@inject IRenderContext RenderContext
@* https://tailwind.primevue.org/treetable/ see for info with table*@
@if (!_isLoading)
{
    <tr class="hover:bg-gray-100 focus:bg-gray-100 focus:hover:bg-gray-600 dark:hover:bg-gray-600">
        <td class="px-@CurrentRowMargin rounded-l">
            <div class="mb-1 ms-2 mt-1 flex flex-row items-center">
                <div class="cursor-pointer text-blue-700 dark:text-blue-400" @onclick="() => ToggleAccountGroupFolder(CurrentAccountGroup)">
                    @if (CurrentAccountGroup.IsExpand)
                    {
                        <svg class="h-6 w-6" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" aria-hidden="true" data-slot="icon">
                            <path stroke-linecap="round" stroke-linejoin="round" d="M15 13.5H9m4.06-7.19-2.12-2.12a1.5 1.5 0 0 0-1.061-.44H4.5A2.25 2.25 0 0 0 2.25 6v12a2.25 2.25 0 0 0 2.25 2.25h15A2.25 2.25 0 0 0 21.75 18V9a2.25 2.25 0 0 0-2.25-2.25h-5.379a1.5 1.5 0 0 1-1.06-.44Z"></path>
                        </svg>
                    }
                    else
                    {
                        <svg class="xmlns= h-6 w-6" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor">
                            <path stroke-linecap="round" stroke-linejoin="round" d="M12 10.5v6m3-3H9m4.06-7.19-2.12-2.12a1.5 1.5 0 0 0-1.061-.44H4.5A2.25 2.25 0 0 0 2.25 6v12a2.25 2.25 0 0 0 2.25 2.25h15A2.25 2.25 0 0 0 21.75 18V9a2.25 2.25 0 0 0-2.25-2.25h-5.379a1.5 1.5 0 0 1-1.06-.44Z" />
                        </svg>
                    }
                </div>
                <div class="px-2 align-bottom">
                    @CurrentAccountGroup.Code @CurrentAccountGroup.Label
                </div>
            </div>
        </td>
        <td>
            <div class="ms-8 flex justify-end gap-4 text-blue-700 dark:text-blue-400">
                <div class="flex cursor-pointer flex-row items-center">
                    <div>
                        <svg class="h-6 w-6" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor">
                            <path stroke-linecap="round" stroke-linejoin="round" d="M12 9v6m3-3H9m12 0a9 9 0 1 1-18 0 9 9 0 0 1 18 0Z" />
                        </svg>
                    </div>
                    <div class="ms-1 text-sm">
                        Attach
                    </div>
                </div>
                <div class="flex cursor-pointer flex-row items-center">
                    <div>
                        <svg class="h-6 w-6" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor">
                            <path stroke-linecap="round" stroke-linejoin="round" d="m16.862 4.487 1.687-1.688a1.875 1.875 0 1 1 2.652 2.652L6.832 19.82a4.5 4.5 0 0 1-1.897 1.13l-2.685.8.8-2.685a4.5 4.5 0 0 1 1.13-1.897L16.863 4.487Zm0 0L19.5 7.125" />
                        </svg>
                    </div>
                    <div class="ms-1 text-sm">
                        Edit
                    </div>
                </div>
                <div class="mr-2 flex cursor-pointer flex-row items-center">
                    <div>
                        <svg class="h-6 w-6" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor">
                            <path stroke-linecap="round" stroke-linejoin="round" d="m14.74 9-.346 9m-4.788 0L9.26 9m9.968-3.21c.342.052.682.107 1.022.166m-1.022-.165L18.16 19.673a2.25 2.25 0 0 1-2.244 2.077H8.084a2.25 2.25 0 0 1-2.244-2.077L4.772 5.79m14.456 0a48.108 48.108 0 0 0-3.478-.397m-12 .562c.34-.059.68-.114 1.022-.165m0 0a48.11 48.11 0 0 1 3.478-.397m7.5 0v-.916c0-1.18-.91-2.164-2.09-2.201a51.964 51.964 0 0 0-3.32 0c-1.18.037-2.09 1.022-2.09 2.201v.916m7.5 0a48.667 48.667 0 0 0-7.5 0" />
                        </svg>
                    </div>
                    <div class="ms-1 align-text-bottom text-sm">
                        Delete
                    </div>
                </div>
            </div>
        </td>
    </tr>

    @if (CurrentAccountGroup.IsExpand)
    {
        @if (_currentNodeAccountGroups.Any())
        {

            @foreach (var node in _currentNodeAccountGroups)
            {
                <AccountGroupNode CurrentAccountGroup="@node" CurrentRowMargin="CurrentRowMargin + 4"></AccountGroupNode>
            }
        }

        @if (_currentNodeAccounts.Any())
        {
            @foreach (var account in _currentNodeAccounts)
            {
                <tr class="hover:bg-gray-100 focus:bg-gray-100 focus:hover:bg-gray-600 dark:hover:bg-gray-600">
                    <td class="px-@_currentRowMarginForAccount">
                        <div class="mt-0 flex items-center">
                            <div class="text-blue-700 dark:text-blue-400">
                                <svg class="h-6 w-6" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor">
                                    <path stroke-linecap="round" stroke-linejoin="round" d="m16.49 12 3.75 3.75m0 0-3.75 3.75m3.75-3.75H3.74V4.499" />
                                </svg>
                            </div>
                            <div class="mt-1 px-2 align-bottom">
                                @account.Code @account.Label
                            </div>
                        </div>
                    </td>
                    <td>
                        <div class="ms-8 flex justify-end gap-4 text-blue-700 dark:text-blue-400">
                            <div class="mr-2 flex cursor-pointer flex-row items-center">
                                <div>
                                    <svg class="h-6 w-6" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor">
                                        <path stroke-linecap="round" stroke-linejoin="round" d="M15 12H9m12 0a9 9 0 1 1-18 0 9 9 0 0 1 18 0Z" />
                                    </svg>

                                </div>
                                <div class="ms-1 text-sm">
                                    Detach account
                                </div>
                            </div>
                        </div>
                    </td>
                </tr>
            }
        }
    }
}

@code {
    //TODO see the best way to update and refresh only the needed part
    [Parameter]
    public AccountGroupModel CurrentAccountGroup { get; set; } = default!;
    [Parameter]
    public int CurrentRowMargin { get; set; } = 0;
    [CascadingParameter(Name = "AccountGroupsDicByParent")]
    public IDictionary<Guid, List<AccountGroupModel>> AccountGroupsDicbyParent { get; set; } = default!;
    [CascadingParameter(Name = "Accounts")]
    public Dictionary<Guid, AccountModel> Accounts { get; set; } = default!;
    [CascadingParameter(Name = "AccountGroupLinksByParent")]
    public Dictionary<Guid, List<AccountGroupLinkModel>> AccountGroupLinksByParent { get; set; } = default!;

    private bool _isLoading = false;
    private IEnumerable<AccountGroupModel> _currentNodeAccountGroups = [];
    private IEnumerable<AccountModel> _currentNodeAccounts = [];
    public int _currentRowMarginForAccount = 0;


    protected override void OnInitialized()
    {
        if (RenderContext.IsPrerendering)
        {
            return;
        }
        _isLoading = true;

        RefreshCurrentNodeData();
        _currentRowMarginForAccount = CurrentRowMargin + 4;

        _isLoading = false;
    }

    public void RefreshCurrentNodeData()
    {
        if (AccountGroupsDicbyParent.TryGetValue(CurrentAccountGroup.Id, out var groups))
            _currentNodeAccountGroups = groups.OrderBy(g => g.Code);

        if (AccountGroupLinksByParent.TryGetValue(CurrentAccountGroup.Id, out var accounts))
        {
            var currentNodeAccountGroupLinksAccountIds = accounts.Select(l => l.AccountId).ToList();
            _currentNodeAccounts = Accounts.Where(a => currentNodeAccountGroupLinksAccountIds.Contains(a.Key)).Select(a => a.Value).OrderBy(a => a.Code);
        }
    }

    private void ToggleAccountGroupFolder(AccountGroupModel accountGroup)
    {
        accountGroup.IsExpand = !accountGroup.IsExpand;
    }
}
