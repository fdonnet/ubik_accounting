@using Ubik.Accounting.Contracts.Accounts.Results
@using Ubik.Accounting.Webapp.Shared.Facades

@inject IAccountingApiClient Client
@inject IRenderContext RenderContext

@if (!_isLoading)
{
    <ul>
        <li>
            <div class="mt-2 flex items-center">
                <div class="text-blue-700 dark:text-blue-400" @onclick="() => ToggleAccountGroupFolder(CurrentAccountGroup)">
                    @if (CurrentAccountGroup.IsExpand)
                    {
                        <svg class="h-6 w-6" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" aria-hidden="true" data-slot="icon">
                            <path stroke-linecap="round" stroke-linejoin="round" d="M15 13.5H9m4.06-7.19-2.12-2.12a1.5 1.5 0 0 0-1.061-.44H4.5A2.25 2.25 0 0 0 2.25 6v12a2.25 2.25 0 0 0 2.25 2.25h15A2.25 2.25 0 0 0 21.75 18V9a2.25 2.25 0 0 0-2.25-2.25h-5.379a1.5 1.5 0 0 1-1.06-.44Z"></path>
                        </svg>
                    }
                    else
                    {
                        <svg class="xmlns= h-6 w-6" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor">
                            <path stroke-linecap="round" stroke-linejoin="round" d="M12 10.5v6m3-3H9m4.06-7.19-2.12-2.12a1.5 1.5 0 0 0-1.061-.44H4.5A2.25 2.25 0 0 0 2.25 6v12a2.25 2.25 0 0 0 2.25 2.25h15A2.25 2.25 0 0 0 21.75 18V9a2.25 2.25 0 0 0-2.25-2.25h-5.379a1.5 1.5 0 0 1-1.06-.44Z" />
                        </svg>
                    }
                </div>
                <div class="mt-1 px-2 align-bottom">
                    @CurrentAccountGroup.Code @CurrentAccountGroup.Label
                </div>
            </div>
        </li>
        @if (CurrentAccountGroup.IsExpand)
        {
            <li>
                @if (_currentNodeAccountGroups.Any())
                {
                    <ul class="ml-6">
                        @foreach (var node in _currentNodeAccountGroups)
                        {
                            <li>
                                <AccountGroupNode CurrentAccountGroup="@node"></AccountGroupNode>
                            </li>
                        }
                    </ul>
                }
            </li>
            <li>
                @if (_currentNodeAccounts.Any())
                {
                    <ul class="ml-6">
                        @foreach (var account in _currentNodeAccounts)
                        {
                            <li>
                                <div class="mt-1 flex items-center">
                                    <div class="text-blue-700 dark:text-blue-400">
                                        <svg class="h-6 w-6" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor">
                                            <path stroke-linecap="round" stroke-linejoin="round" d="m16.49 12 3.75 3.75m0 0-3.75 3.75m3.75-3.75H3.74V4.499" />
                                        </svg>
                                    </div>
                                    <div class="mt-1 px-2 align-bottom">
                                        @account.Code @account.Label
                                    </div>
                                </div>
                            </li>
                        }
                    </ul>
                }
            </li>
        }
    </ul>
}

@code {
    //TODO see the best way to update and refresh only the needed part
    [Parameter]
    public AccountGroupModel CurrentAccountGroup { get; set; } = default!;
    [CascadingParameter(Name = "AccountGroupsDicByParent")]
    public IDictionary<Guid, List<AccountGroupModel>> AccountGroupsDicbyParent { get; set; } = default!;
    [CascadingParameter(Name = "Accounts")]
    public Dictionary<Guid, AccountModel> Accounts { get; set; } = default!;
    [CascadingParameter(Name = "AccountGroupLinksByParent")]
    public Dictionary<Guid, List<AccountGroupLinkModel>> AccountGroupLinksByParent { get; set; } = default!;

    private bool _isLoading = false;
    private IEnumerable<AccountGroupModel> _currentNodeAccountGroups = [];
    private IEnumerable<AccountModel> _currentNodeAccounts = [];

    protected override void OnInitialized()
    {
        if (RenderContext.IsPrerendering)
        {
            return;
        }
        _isLoading = true;

        RefreshCurrentNodeData();

        _isLoading = false;
    }

    public void RefreshCurrentNodeData()
    {
        if (AccountGroupsDicbyParent.TryGetValue(CurrentAccountGroup.Id, out var groups))
            _currentNodeAccountGroups = groups.OrderBy(g => g.Code);

        if (AccountGroupLinksByParent.TryGetValue(CurrentAccountGroup.Id, out var accounts))
        {
            var currentNodeAccountGroupLinksAccountIds = accounts.Select(l => l.AccountId).ToList();
            _currentNodeAccounts = Accounts.Where(a => currentNodeAccountGroupLinksAccountIds.Contains(a.Key)).Select(a => a.Value).OrderBy(a => a.Code);
        }
    }

    private void ToggleAccountGroupFolder(AccountGroupModel accountGroup)
    {
        accountGroup.IsExpand = !accountGroup.IsExpand;
    }
}
