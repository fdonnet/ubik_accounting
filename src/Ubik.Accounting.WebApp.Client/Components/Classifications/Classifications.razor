@using Ubik.Accounting.WebApp.Client.Components.Common.Alerts
@using Ubik.Accounting.Webapp.Shared.Facades
@using Ubik.Accounting.WebApp.Client.Components.Common.Forms
@using Ubik.Accounting.Contracts.Classifications.Results
@using Ubik.Accounting.WebApp.Client.Components.Common.Buttons
@using Ubik.Accounting.WebApp.Client.Components.Common.Modal

@inject IAccountingApiClient Client
@inject IRenderContext RenderContext

@if (IsAuthorizedToRead)
{
    <ErrBackendApi MainErrorMsg="Cannot retrieve all the necessary data" @ref="_backendErrorMsg"></ErrBackendApi>

    <div class="flex items-center">
        <div class="w-full lg:w-[520px]">
            <UbikInputSelect Id="CurrentClassification" TValue="Guid?"
                             ValueExpression="@(() => _currentClassificationId)" Value="@_currentClassificationId"
                             ValueChanged="@((Guid? args) => _currentClassificationId = args)"
                             PlaceholderText="Select a classification"
                             Data="_classifications" DataKey="Id" DataValue="Code"></UbikInputSelect>
        </div>
        @if (IsAuthorizedToModify)
        {
            <div class="ms-2">
                or
            </div>
            <div class="ms-2">
                <UbikButton Label="Add new" Type="button" AdditionalCssClass="whitespace-nowrap" IsDisabled=@_isButtonsDisabled OnClick="AddClassificationDialogAsync"></UbikButton>
            </div>
        }
    </div>

    @if (IsAuthorizedToModify)
    {
        <CascadingValue Name="ClassificationModel" Value="@_classificationCurrent">
            <UbikModal @ref="_dialog" ButtonLabel="Add" DialogTitle="@_dialogTitle" CloseOnClickOutisde="false">
                <ClassificationForm EditMode="@_editMode" OnClose="CloseDialogAsync"></ClassificationForm>
            </UbikModal>
        </CascadingValue>
    }
}

@code {
    [Parameter]
    public bool IsAuthorizedToRead { get; set; } = false;
    [Parameter]
    public bool IsAuthorizedToModify { get; set; } = false;

    private Guid? _currentClassificationId { get; set; }
    private IQueryable<ClassificationModel>? _classifications;
    private ClassificationModel _classificationCurrent = new();

    private ErrBackendApi _backendErrorMsg = default!;
    private bool _isLoading = false;

    private UbikModal _dialog = default!;
    private bool _editMode = false;
    private string _dialogTitle = "Add classification";

    private bool _isButtonsDisabled
    {
        get
        {
            return _isLoading || RenderContext.IsPrerendering;
        }
    }

    protected override async Task OnInitializedAsync()
    {
        if (RenderContext.IsPrerendering)
        {
            return;
        }

        await LoadClassificationsAsync();
    }

    private async Task LoadClassificationsAsync()
    {
        _isLoading = true;

        var response = await Client.GetAllClassificationsAsync();

        if (response.IsSuccessStatusCode)
        {
            var result = (await response.Content.ReadFromJsonAsync<IEnumerable<GetAllClassificationsResult>>() ?? []).ToClassificationModel();
            _classifications = result.AsQueryable();
        }
        else
        {
            await _backendErrorMsg.ShowErrorAsync(response);
            StateHasChanged();
        }

        _isLoading = false;
    }

    private async Task CloseDialogAsync(bool refresh = false)
    {
        if (refresh)
        {
            await LoadClassificationsAsync();
        }

        await _dialog.CloseDialogAsync();
    }

    private async Task AddClassificationDialogAsync()
    {
        _dialogTitle = "Add a classification";
        _editMode = false;
        _classificationCurrent = new();
        await _dialog.ShowDialog();
    }
}
