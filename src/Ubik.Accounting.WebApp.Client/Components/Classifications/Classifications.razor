@using Ubik.Accounting.Contracts.Accounts.Results
@using Ubik.Accounting.WebApp.Client.Components.Common.Alerts
@using Ubik.Accounting.Webapp.Shared.Facades
@using Ubik.Accounting.WebApp.Client.Components.Common.Forms
@using Ubik.Accounting.Contracts.Classifications.Results
@using Ubik.Accounting.Contracts.AccountGroups.Results
@using Ubik.Accounting.WebApp.Client.Components.Common.Buttons
@using Ubik.Accounting.WebApp.Client.Components.Common.Modal

@inject IAccountingApiClient Client
@inject IRenderContext RenderContext

@if (IsAuthorizedToRead)
{
    <ErrBackendApi MainErrorMsg="Cannot retrieve all the necessary data" @ref="_backendErrorMsg"></ErrBackendApi>

    <div class="flex items-center">
        <div class="w-full lg:w-[520px]">
            <UbikInputSelect Id="CurrentClassification" TValue="Guid?"
                             ValueExpression="@(() => _currentClassificationId)" Value="@_currentClassificationId"
                             ValueChanged="@((Guid? args) => OnClassificationChanged(args))"
                             PlaceholderText="Select a classification"
                             Data="_classifications" DataKey="Id" DataValue="Code"></UbikInputSelect>
        </div>
        @if (IsAuthorizedToModify)
        {
            <div class="ms-2">
                or
            </div>
            <div class="ms-2">
                <UbikButton Label="Add new" Type="button" AdditionalCssClass="whitespace-nowrap" IsDisabled=@_isButtonsDisabled OnClick="AddClassificationDialogAsync"></UbikButton>
            </div>
        }
    </div>

    @if (IsAuthorizedToModify)
    {
        <CascadingValue Name="ClassificationModel" Value="@_classificationCurrent">
            <UbikModal @ref="_dialog" ButtonLabel="Add" DialogTitle="@_dialogTitle" CloseOnClickOutisde="false">
                <ClassificationForm EditMode="@_editMode" OnClose="CloseDialogAsync"></ClassificationForm>
            </UbikModal>
        </CascadingValue>
    }

    @if (!_isLoading)
    {
        <CascadingValue Value="@_accountGroups">
        <ul>
            @foreach (var node in _accountGroupsRoot)
            {
                <li class="list-none">
                   <AccountGroupNode CurrentAccountGroup="@node"></AccountGroupNode>
                </li>
            }
        </ul>
        </CascadingValue>
    }
}

@code {
    [Parameter]
    public bool IsAuthorizedToRead { get; set; } = false;
    [Parameter]
    public bool IsAuthorizedToModify { get; set; } = false;

    private Guid? _currentClassificationId { get; set; }
    private IQueryable<ClassificationModel>? _classifications;
    private IQueryable<AccountGroupModel> _accountGroups = default!;
    private IEnumerable<AccountGroupModel> _accountGroupsRoot = [];
    private IEnumerable<GetAllAccountsResult> _accounts = [];
    private ClassificationModel _classificationCurrent = new();

    private ErrBackendApi _backendErrorMsg = default!;
    private bool _isLoading = false;

    private UbikModal _dialog = default!;
    private bool _editMode = false;
    private string _dialogTitle = "Add classification";

    private bool _isButtonsDisabled
    {
        get
        {
            return _isLoading || RenderContext.IsPrerendering;
        }
    }

    protected override async Task OnInitializedAsync()
    {
        if (RenderContext.IsPrerendering)
        {
            return;
        }
        _isLoading = true;

        await LoadDataAync();

        _isLoading = false;
    }

    private async Task LoadDataAync()
    {
        var taskClassification = Client.GetAllClassificationsAsync();
        var taskAccountGroups = Client.GetAllAccountGroupsAsync();
        var taskAccounts = Client.GetAllAccountsAsync();

        await Task.WhenAll(taskClassification, taskAccountGroups, taskAccounts);

        await LoadClassificationsAsync(await taskClassification);
        await LoadAccountGroupsAsync(await taskAccountGroups);
        await LoadAccountsAsync(await taskAccounts);
    }

    private Task OnClassificationChanged(Guid? value)
    {
        _currentClassificationId = value;
        _accountGroupsRoot = _accountGroups.Where(ag => ag.AccountGroupClassificationId == _currentClassificationId
                                                       && ag.ParentAccountGroupId == null);

        return Task.CompletedTask;
    }

    private async Task LoadClassificationsAsync(HttpResponseMessage response)
    {
        if (response.IsSuccessStatusCode)
        {
            var result = (await response.Content.ReadFromJsonAsync<IEnumerable<GetAllClassificationsResult>>() ?? []).ToClassificationModel();
            _classifications = result.AsQueryable();
        }
        else
            await ManageError(response);    
    }

    private async Task LoadAccountGroupsAsync(HttpResponseMessage response)
    {
        if (response.IsSuccessStatusCode)
        {
            var result = (await response.Content.ReadFromJsonAsync<IEnumerable<GetAllAccountGroupsResult>>() ?? []).ToAccountGroupModel();
            _accountGroups = result.AsQueryable();
        }
        else
            await ManageError(response);
    }

    private async Task LoadAccountsAsync(HttpResponseMessage response)
    {
        if (response.IsSuccessStatusCode)
            _accounts = await response.Content.ReadFromJsonAsync<IEnumerable<GetAllAccountsResult>>() ?? [];
        else
            await ManageError(response);
    }

    private async Task ManageError(HttpResponseMessage response)
    {
        await _backendErrorMsg.ShowErrorAsync(response);
        StateHasChanged();
    }

    private async Task CloseDialogAsync(bool refresh = false)
    {
        if (refresh)
        {
            await LoadDataAync();
        }

        await _dialog.CloseDialogAsync();
    }

    private async Task AddClassificationDialogAsync()
    {
        _dialogTitle = "Add a classification";
        _editMode = false;
        _classificationCurrent = new();
        await _dialog.ShowDialog();
    }
}
