@using Ubik.Accounting.Contracts.Accounts.Results
@using Ubik.Accounting.WebApp.Client.Components.Common.Alerts
@using Ubik.Accounting.Webapp.Shared.Facades
@using Ubik.Accounting.WebApp.Client.Components.Common.Forms
@using Ubik.Accounting.Contracts.Classifications.Results
@using Ubik.Accounting.Contracts.AccountGroups.Results
@using Ubik.Accounting.WebApp.Client.Components.Common.Buttons
@using Ubik.Accounting.WebApp.Client.Components.Common.Modal

@inject IAccountingApiClient Client
@inject IRenderContext RenderContext

@if (IsAuthorizedToRead)
{
    <ErrBackendApi MainErrorMsg="Cannot retrieve all the necessary data" @ref="_backendErrorMsg"></ErrBackendApi>

    <div class="mb-5 flex items-center">
        <div class="w-full lg:w-[520px]">
            <UbikInputSelect Id="CurrentClassification" TValue="Guid?"
                             ValueExpression="@(() => _currentClassificationId)" Value="@_currentClassificationId"
                             ValueChanged="@((Guid? args) => OnClassificationChanged(args))"
                             PlaceholderText="Select a classification"
                             Data="_classifications" DataKey="Id" DataValue="Code"></UbikInputSelect>
        </div>
        @if (IsAuthorizedToModify)
        {
            <div class="ms-2">
                or
            </div>
            <div class="ms-2">
                <UbikButton Label="Add new" Type="button" AdditionalCssClass="whitespace-nowrap" IsDisabled=@_isButtonsDisabled OnClick="AddClassificationDialogAsync"></UbikButton>
            </div>
        }
    </div>

    @if (IsAuthorizedToModify)
    {
        <CascadingValue Name="ClassificationModel" Value="@_classificationCurrent">
            <UbikModal @ref="_classificationDialog" ButtonLabel="Add" DialogTitle="@_dialogTitle" CloseOnClickOutisde="false">
                <ClassificationForm EditMode="@_editMode" OnClose="CloseClassificationDialogAsync"></ClassificationForm>
            </UbikModal>
        </CascadingValue>
    }

    @if (!_isLoading)
    {
        <div class="flex w-full flex-row">
            @if (_currentClassificationId != null && IsAuthorizedToModify)
            {
                <div>
                    <UbikButton Label="Add root" Type="button" AdditionalCssClass="whitespace-nowrap" IsDisabled=@_isButtonsDisabled OnClick="AddAccountGroupDialogAsync"></UbikButton>
                </div>
            }
            @if (_accountGroupsRoot.Any())
            {
                <div class="flex w-full flex-row justify-end">
                    <div class="mr-2">
                        <UbikButtonAlternative Label="Expand all" Type="button" AdditionalCssClass="whitespace-nowrap" IsDisabled=@_isButtonsDisabled OnClick="()=>ToggleExpandHideAllAccountGroups(true)"></UbikButtonAlternative>
                    </div>
                    <div>
                        <UbikButtonAlternative Label="Hide all" Type="button" AdditionalCssClass="whitespace-nowrap" IsDisabled=@_isButtonsDisabled OnClick="()=>ToggleExpandHideAllAccountGroups(false)"></UbikButtonAlternative>
                    </div>
                </div>
            }
        </div>

        @if (_accountGroupsRoot.Any())
        {
            <div class="mt-1 overflow-x-auto whitespace-nowrap rounded-lg bg-white px-2 pb-2 dark:bg-gray-800">
                <CascadingValue Name="AccountGroupsDicByParent" Value="@_accountGroupsDicByParent">
                    <CascadingValue Name="Accounts" Value="@_accounts">
                        <CascadingValue Name="AccountGroupLinksByParent" Value="@_accountsLinksByParent">
                            @foreach (var node in _accountGroupsRoot)
                            {
                                <AccountGroupNode @key="node" CurrentAccountGroup="@node"></AccountGroupNode>
                            }
                        </CascadingValue>
                    </CascadingValue>
                </CascadingValue>
            </div>
        }

        @if (_currentClassificationId != null && IsAuthorizedToModify)
        {
            <div class="mt-3">
                <UbikButtonDelete Label="Delete this classification" Type="buttoon" AdditionalCssClass="whitespace-nowrap" OnClick="DeleteClassificationConfirmationAsync"></UbikButtonDelete>
            </div>
        }

        @if (IsAuthorizedToModify)
        {
            <CascadingValue Name="AccountGroups" Value="@_accountGroups">
                <CascadingValue Name="AccountGroupModel" Value="@_accountGroupCurrent">
                    <UbikModal @ref="_dialogAccountGrp" ButtonLabel="Add" DialogTitle="@_dialogAccountGrpTitle" CloseOnClickOutisde="false">
                        <AccountGroupForm EditMode="@_editModeAccountGrp" ClassificationId="_currentClassificationId" OnClose="CloseDialogAccountGroupAsync"></AccountGroupForm>
                    </UbikModal>
                </CascadingValue>
            </CascadingValue>
            <CascadingValue Name="ClassificationModel" Value="@_classificationCurrent">
                <UbikModalCenter @ref="_deleteClassificationDialog">
                    <ClassificationConfirmDelete @ref="_deleteClassificationMsg" OnClose="CloseDeleteClassificationDialogAsync"></ClassificationConfirmDelete>
                </UbikModalCenter>
            </CascadingValue>
        }
    }
}

@code {
    [Parameter]
    public bool IsAuthorizedToRead { get; set; } = false;
    [Parameter]
    public bool IsAuthorizedToModify { get; set; } = false;

    private Guid? _currentClassificationId { get; set; }
    private List<ClassificationModel>? _classifications;
    private List<AccountGroupModel> _accountGroups = default!;
    private List<AccountGroupModel> _accountGroupsRoot = [];
    private Dictionary<Guid, List<AccountGroupModel>> _accountGroupsDicByParent = default!;
    private Dictionary<Guid, AccountModel> _accounts = default!;
    private Dictionary<Guid, List<AccountGroupLinkModel>> _accountsLinksByParent = default!;
    private ClassificationModel? _classificationCurrent = new();
    private AccountGroupModel _accountGroupCurrent = new();

    private ErrBackendApi _backendErrorMsg = default!;
    private bool _isLoading = false;

    private UbikModal _classificationDialog = default!;
    private bool _editMode = false;
    private string _dialogTitle = "Add classification";

    private UbikModalCenter _deleteClassificationDialog = default!;
    private ClassificationConfirmDelete _deleteClassificationMsg = default!;

    private UbikModal _dialogAccountGrp = default!;
    private bool _editModeAccountGrp = false;
    private string _dialogAccountGrpTitle = "Add account group";

    private bool _isButtonsDisabled
    {
        get
        {
            return _isLoading || RenderContext.IsPrerendering;
        }
    }

    protected override async Task OnInitializedAsync()
    {
        if (RenderContext.IsPrerendering)
        {
            return;
        }
        _isLoading = true;

        await LoadDataAync();

        _isLoading = false;
    }

    private async Task LoadDataAync()
    {
        var taskClassification = Client.GetAllClassificationsAsync();
        var taskAccountGroups = Client.GetAllAccountGroupsAsync();
        var taskAccounts = Client.GetAllAccountsAsync();
        var taskAccountsLinks = Client.GetAllAccountsLinksAsync();

        await Task.WhenAll(taskClassification, taskAccountGroups, taskAccounts, taskAccountsLinks);

        await LoadClassificationsAsync(await taskClassification);
        await LoadAccountGroupsAsync(await taskAccountGroups);
        await LoadAccountsAsync(await taskAccounts);
        await LoadAccountsLinksAsync(await taskAccountsLinks);
    }

    private Task OnClassificationChanged(Guid? value)
    {
        _currentClassificationId = value;
        _classificationCurrent = _classifications?.Where(c => c.Id == _currentClassificationId).FirstOrDefault();

        RefreshAccountGroupRoots();

        StateHasChanged();
        return Task.CompletedTask;
    }

    private void RefreshAccountGroupRoots()
    {
        _accountGroupsRoot = _accountGroups.Where(ag => ag.AccountGroupClassificationId == _currentClassificationId
                                                       && ag.ParentAccountGroupId == null).OrderBy(root => root.Code).ToList();
    }

    private async Task LoadClassificationsAsync(HttpResponseMessage response)
    {
        if (response.IsSuccessStatusCode)
        {
            _classifications = (await response.Content.ReadFromJsonAsync<IEnumerable<GetAllClassificationsResult>>()
                ?? []).ToClassificationModel().ToList();
        }
        else
            await ManageError(response);
    }

    private async Task LoadAccountGroupsAsync(HttpResponseMessage response)
    {
        if (response.IsSuccessStatusCode)
        {
            _accountGroups = (await response.Content.ReadFromJsonAsync<IEnumerable<GetAllAccountGroupsResult>>()
                ?? []).ToAccountGroupModels().ToList();

            BuildAccountGrpDicByParent();
        }
        else
            await ManageError(response);
    }

    private void ToggleExpandHideAllAccountGroups(bool expand)
    {
        _accountGroups.ForEach(ag => ag.IsExpand = expand);
        BuildAccountGrpDicByParent();
    }

    private void BuildAccountGrpDicByParent()
    {
        var withParent = _accountGroups.Where(ag => ag.ParentAccountGroupId != null);
        _accountGroupsDicByParent = new();

        foreach (var childAccountGrp in withParent)
        {
            if (_accountGroupsDicByParent.TryGetValue((Guid)childAccountGrp.ParentAccountGroupId!, out var value))
                value.Add(childAccountGrp);
            else
                _accountGroupsDicByParent.Add((Guid)childAccountGrp.ParentAccountGroupId!, new List<AccountGroupModel> { childAccountGrp });
        }
    }

    private async Task LoadAccountsAsync(HttpResponseMessage response)
    {
        if (response.IsSuccessStatusCode)
        {
            _accounts = (await response.Content.ReadFromJsonAsync<IEnumerable<GetAllAccountsResult>>()
                    ?? []).ToAccountModel().ToDictionary(x => x.Id);
        }
        else
            await ManageError(response);
    }

    private async Task LoadAccountsLinksAsync(HttpResponseMessage response)
    {
        if (response.IsSuccessStatusCode)
        {
            var result = (await response.Content.ReadFromJsonAsync<IEnumerable<GetAllAccountGroupLinksResult>>()
                    ?? []).ToAccountGroupLinkModel();

            _accountsLinksByParent = new();

            foreach (var childAccount in result)
            {
                if (_accountsLinksByParent.TryGetValue((Guid)childAccount.AccountGroupId!, out var value))
                    value.Add(childAccount);
                else
                    _accountsLinksByParent.Add((Guid)childAccount.AccountGroupId!, new List<AccountGroupLinkModel> { childAccount });
            }
        }
        else
            await ManageError(response);
    }

    private async Task ManageError(HttpResponseMessage response)
    {
        await _backendErrorMsg.ShowErrorAsync(response);
        StateHasChanged();
    }

    private async Task CloseClassificationDialogAsync(bool refresh = false)
    {
        if (refresh)
        {
            await LoadDataAync();
        }

        await _classificationDialog.CloseDialogAsync();
    }

    private async Task CloseDialogAccountGroupAsync(bool refresh = false)
    {
        RefreshAccountGroupRoots();
        await _dialogAccountGrp.CloseDialogAsync();
    }

    private async Task AddClassificationDialogAsync()
    {
        _dialogTitle = "Add a classification";
        _editMode = false;
        _classificationCurrent = new();
        await _classificationDialog.ShowDialog();
    }

    private async Task AddAccountGroupDialogAsync()
    {
        _dialogAccountGrpTitle = "Add a root";
        _editModeAccountGrp = false;
        _accountGroupCurrent = new();
        await _dialogAccountGrp.ShowDialog();
    }

    private async Task DeleteClassificationConfirmationAsync()
    {
        if (_classificationCurrent != null)
        {
            await _deleteClassificationMsg.SetInitialStatus();
            await _deleteClassificationDialog.ShowDialogAsync();
        }
    }
    private async Task CloseDeleteClassificationDialogAsync(bool refresh = false)
    {
        await _deleteClassificationDialog.CloseDialogAsync();
        if (refresh)
        {
            _isLoading = true;

            await LoadDataAync();
            _currentClassificationId = null;

            RefreshAccountGroupRoots();

            _isLoading = false;
        }
    }

}
