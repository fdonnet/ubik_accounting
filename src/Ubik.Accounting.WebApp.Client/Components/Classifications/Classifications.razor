@using Ubik.Accounting.Contracts.Accounts.Results
@using Ubik.Accounting.WebApp.Client.Components.Common.Alerts
@using Ubik.Accounting.Webapp.Shared.Facades
@using Ubik.Accounting.WebApp.Client.Components.Common.Forms
@using Ubik.Accounting.Contracts.Classifications.Results
@using Ubik.Accounting.Contracts.AccountGroups.Results
@using Ubik.Accounting.WebApp.Client.Components.Common.Buttons
@using Ubik.Accounting.WebApp.Client.Components.Common.Modal

@inject IAccountingApiClient Client
@inject IRenderContext RenderContext

@if (IsAuthorizedToRead)
{
    <ErrBackendApi MainErrorMsg="Cannot retrieve all the necessary data" @ref="_backendErrorMsg"></ErrBackendApi>

    @if (!_isLoading)
    {
        <div class="flex items-center">
            <div class="w-full lg:w-[520px]">
                <UbikInputSelect Id="CurrentClassification" TValue="Guid?"
                                 ValueExpression="@(() => _currentClassificationId)" Value="@_currentClassificationId"
                                 ValueChanged="@((Guid? args) => OnClassificationChanged(args))"
                                 PlaceholderText="Select a classification"
                                 Data="_classifications" DataKey="Id" DataValue="Code"></UbikInputSelect>
            </div>
            @if (IsAuthorizedToModify)
            {
                <div class="ms-2">
                    or
                </div>
                <div class="ms-2">
                    <UbikButton Label="Add new" Type="button" AdditionalCssClass="whitespace-nowrap" IsDisabled=@_isButtonsDisabled OnClick="AddClassificationDialogAsync"></UbikButton>
                </div>
            }
        </div>

        @if (IsAuthorizedToModify)
        {
            <CascadingValue Name="ClassificationModel" Value="@_classificationCurrent">
                <UbikModal @ref="_dialog" ButtonLabel="Add" DialogTitle="@_dialogTitle" CloseOnClickOutisde="false">
                    <ClassificationForm EditMode="@_editMode" OnClose="CloseDialogAsync"></ClassificationForm>
                </UbikModal>
            </CascadingValue>
        }


        <CascadingValue Name="AccountGroupsDicByParent" Value="@_accountGroupsDicByParent">
            <CascadingValue Name="Accounts" Value="@_accounts">
                <CascadingValue Name="AccountGroupLinks" Value="@_accountsLinks">
                    <ul>
                        @foreach (var node in _accountGroupsRoot)
                        {
                            <li class="list-none">
                                <AccountGroupNode CurrentAccountGroup="@node"></AccountGroupNode>
                            </li>
                        }
                    </ul>
                </CascadingValue>
            </CascadingValue>
        </CascadingValue>
    }
}

@code {
    //TODO set a dictionnary for the account links
    [Parameter]
    public bool IsAuthorizedToRead { get; set; } = false;
    [Parameter]
    public bool IsAuthorizedToModify { get; set; } = false;

    private Guid? _currentClassificationId { get; set; }
    private IEnumerable<ClassificationModel>? _classifications;
    private IEnumerable<AccountGroupModel> _accountGroups = default!;
    private IEnumerable<AccountGroupModel> _accountGroupsRoot = [];
    private Dictionary<Guid, List<AccountGroupModel>> _accountGroupsDicByParent = default!;
    private IEnumerable<AccountModel> _accounts = default!;
    private IEnumerable<AccountGroupLinkModel> _accountsLinks = default!;
    private ClassificationModel _classificationCurrent = new();

    private ErrBackendApi _backendErrorMsg = default!;
    private bool _isLoading = false;

    private UbikModal _dialog = default!;
    private bool _editMode = false;
    private string _dialogTitle = "Add classification";

    private bool _isButtonsDisabled
    {
        get
        {
            return _isLoading || RenderContext.IsPrerendering;
        }
    }

    protected override async Task OnInitializedAsync()
    {
        if (RenderContext.IsPrerendering)
        {
            return;
        }
        _isLoading = true;

        await LoadDataAync();

        _isLoading = false;
    }

    private async Task LoadDataAync()
    {
        var taskClassification = Client.GetAllClassificationsAsync();
        var taskAccountGroups = Client.GetAllAccountGroupsAsync();
        var taskAccounts = Client.GetAllAccountsAsync();
        var taskAccountsLinks = Client.GetAllAccountsLinksAsync();

        await Task.WhenAll(taskClassification, taskAccountGroups, taskAccounts, taskAccountsLinks);

        await LoadClassificationsAsync(await taskClassification);
        await LoadAccountGroupsAsync(await taskAccountGroups);
        await LoadAccountsAsync(await taskAccounts);
        await LoadAccountsLinksAsync(await taskAccountsLinks);
    }

    private Task OnClassificationChanged(Guid? value)
    {
        _currentClassificationId = value;
        _accountGroupsRoot = _accountGroups.Where(ag => ag.AccountGroupClassificationId == _currentClassificationId
                                                       && ag.ParentAccountGroupId == null);

        return Task.CompletedTask;
    }

    private async Task LoadClassificationsAsync(HttpResponseMessage response)
    {
        if (response.IsSuccessStatusCode)
        {
            _classifications = (await response.Content.ReadFromJsonAsync<IEnumerable<GetAllClassificationsResult>>()
                ?? []).ToClassificationModel();
        }
        else
            await ManageError(response);
    }

    private async Task LoadAccountGroupsAsync(HttpResponseMessage response)
    {
        if (response.IsSuccessStatusCode)
        {
            _accountGroups = (await response.Content.ReadFromJsonAsync<IEnumerable<GetAllAccountGroupsResult>>()
                ?? []).ToAccountGroupModel();

            //Create a DIC from parentId
            var withParent = _accountGroups.Where(ag => ag.ParentAccountGroupId != null);
            _accountGroupsDicByParent = new();

            foreach (var childAccount in withParent)
            {
                if (_accountGroupsDicByParent.TryGetValue((Guid)childAccount.ParentAccountGroupId!, out var value))
                    value.Add(childAccount);
                else
                    _accountGroupsDicByParent.Add((Guid)childAccount.ParentAccountGroupId!, new List<AccountGroupModel> { childAccount });
            }
        }
        else
            await ManageError(response);
    }

    private async Task LoadAccountsAsync(HttpResponseMessage response)
    {
        if (response.IsSuccessStatusCode)
        {
            _accounts = (await response.Content.ReadFromJsonAsync<IEnumerable<GetAllAccountsResult>>()
                    ?? []).ToAccountModel();
        }
        else
            await ManageError(response);
    }

    private async Task LoadAccountsLinksAsync(HttpResponseMessage response)
    {
        if (response.IsSuccessStatusCode)
        {
            _accountsLinks = (await response.Content.ReadFromJsonAsync<IEnumerable<GetAllAccountGroupLinksResult>>()
                    ?? []).ToAccountGroupLinkModel();
        }
        else
            await ManageError(response);
    }

    private async Task ManageError(HttpResponseMessage response)
    {
        await _backendErrorMsg.ShowErrorAsync(response);
        StateHasChanged();
    }

    private async Task CloseDialogAsync(bool refresh = false)
    {
        if (refresh)
        {
            await LoadDataAync();
        }

        await _dialog.CloseDialogAsync();
    }

    private async Task AddClassificationDialogAsync()
    {
        _dialogTitle = "Add a classification";
        _editMode = false;
        _classificationCurrent = new();
        await _dialog.ShowDialog();
    }
}
