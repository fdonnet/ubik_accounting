﻿@using Microsoft.AspNetCore.Components.Rendering
@using Microsoft.AspNetCore.Components.Web
@using Microsoft.AspNetCore.Components.Web.Virtualization

@typeparam TGridItem
@{
    InternalGridContext.Grid.AddColumn(this, InitialSortDirection, IsDefaultSortColumn);
}

@code {
    //TODO Manage the sort thing
    private void RenderDefaultHeaderContent(RenderTreeBuilder __builder)
    {
        // @if (HeaderTemplate is not null)
        // {
        //     @HeaderTemplate(this)
        // }
        // else
        // {
        //     @if (ColumnOptions is not null && (Align != Align.Right && Align != Align.End))
        //     {
        //         <button class="col-options-button" type="button" @onclick="@(() => Grid.ShowColumnOptionsAsync(this))"></button>
        //     }

        if (Sortable.HasValue ? Sortable.Value : IsSortableByDefault())
        {
            <button type="button" @onclick="@(() => Grid.SortByColumnAsync(this))" class="uppercase">
                <span>@Title</span>
                <div class="sort-indicator" aria-hidden="true"></div>
            </button>
        }
        else
        {
            <span>@Title</span>
        }

        //     @if (ColumnOptions is not null && (Align == Align.Right || Align == Align.End))
        //     {
        //         <button class="col-options-button" type="button" @onclick="@(() => Grid.ShowColumnOptionsAsync(this))"></button>
        //     }
        // }
    }

}
