@inherits InputBase<string>
@using System.Linq.Expressions
@using System.Diagnostics.CodeAnalysis;

<label for="@Id" class="block mb-2 text-sm font-medium text-gray-900 dark:text-white">@Label</label>
<input type="@Type" name="@Id" id="@Id" placeholder="@PlaceholderText" @bind-value="CurrentValue" class="bg-gray-50 border border-gray-300 text-gray-900 text-sm rounded-lg focus:ring-primary-600 focus:border-primary-600 block w-full p-2.5 dark:bg-gray-600 dark:border-gray-500 dark:placeholder-gray-400 dark:text-white dark:focus:ring-primary-500 dark:focus:border-primary-500">
@* <p class="mt-2 text-sm text-red-600 dark:text-red-500"><UbikValidationMessage class="font-medium" For="@(()=>CurrentValue)"></UbikValidationMessage></p> *@


@code {
    [Parameter]
    public string Id { get; set; } = "input";
    [Parameter]
    public string Label { get; set; } = "Standard input";
    [Parameter]
    public string Type { get; set; } = "text";
    [Parameter]
    public string PlaceholderText { get; set; } = string.Empty;

    protected override bool TryParseValueFromString(string? value, out string? result, [NotNullWhen(false)] out string? validationErrorMessage)
    {
        result = value;
        validationErrorMessage = null;
        return true;
    }
}
