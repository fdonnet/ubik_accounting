@using Ubik.Accounting.Contracts.Error
@inject IJSRuntime JS
<div id="@_alertId" class="hidden p-4 mb-4 text-red-800 border border-red-300 rounded-lg bg-red-50 dark:bg-gray-800 dark:text-red-400 dark:border-red-800" role="alert">
    <div class="flex items-center">
        <svg class="flex-shrink-0 w-10 h-10 me-2" aria-hidden="true" xmlns="http://www.w3.org/2000/svg" fill="currentColor" viewBox="0 0 24 24">
            <path fill-rule="evenodd" clip-rule="evenodd" d="M12 22c5.523 0 10-4.477 10-10S17.523 2 12 2 2 6.477 2 12s4.477 10 10 10zm-1.5-5.009c0-.867.659-1.491 1.491-1.491.85 0 1.509.624 1.509 1.491 0 .867-.659 1.509-1.509 1.509-.832 0-1.491-.642-1.491-1.509zM11.172 6a.5.5 0 0 0-.499.522l.306 7a.5.5 0 0 0 .5.478h1.043a.5.5 0 0 0 .5-.478l.305-7a.5.5 0 0 0-.5-.522h-1.655z" />
        </svg>
        <span class="sr-only">Error</span>
        <div class="ms-3 text-sm font-medium">
            <p class="text-red-800 dark:text-red-400 font-bold">Cannot save your data.</p>
            <ul class="ms-2 list-disc">
                @foreach (var err in _currentError.Errors)
                {
                    <li class="text-red-800 dark:text-red-400">@err.FriendlyMsg</li>
                }
            </ul>
        </div>
    </div>
    <div class="flex mt-4 sm:mt-5">
        <button type="button" @onclick="ShowErrorDetailsAsync" class="text-white bg-red-800 hover:bg-red-900 focus:ring-4 focus:outline-none focus:ring-red-300 font-medium rounded-lg text-xs px-3 py-1.5 me-2 text-center inline-flex items-center dark:bg-red-600 dark:hover:bg-red-700 dark:focus:ring-red-800">
            <svg class="me-2 h-3 w-3" aria-hidden="true" xmlns="http://www.w3.org/2000/svg" fill="currentColor" viewBox="0 0 20 14">
                <path d="M10 0C4.612 0 0 5.336 0 7c0 1.742 3.546 7 10 7 6.454 0 10-5.258 10-7 0-1.664-4.612-7-10-7Zm0 10a3 3 0 1 1 0-6 3 3 0 0 1 0 6Z" />
            </svg>
            View details
        </button>
        <button type="button" @onclick="DismissErrorAsync" class="text-red-800 bg-transparent border border-red-800 hover:bg-red-900 hover:text-white focus:ring-4 focus:outline-none focus:ring-red-300 font-medium rounded-lg text-xs px-3 py-1.5 text-center dark:hover:bg-red-600 dark:border-red-600 dark:text-red-500 dark:hover:text-white dark:focus:ring-red-800" data-dismiss-target="#alert-additional-content-2" aria-label="Close">
            Dismiss
        </button>
    </div>
    <div id="@_detailId" class="hidden mt-3 sm:mt-4 font-['Inconsolata'] font-light text-sm">
        <div class="flex flex-col">
            <div class="flex">
                <div>HTTP code:</div>
                <div class="ms-2 sm:ms-4">@_currentError.Status</div>
            </div>
            <div class="flex flex-col mt-2">
                <div>Error(s):</div>
                @foreach (var err in _currentError.Errors)
                {
                    <div class="flex flex-col ms-3 mb-2">
                        <div class="flex flex-row">
                            <div class="min-w-[70px]">Code:</div>
                            <div class="ms-2">@err.Code</div>
                        </div>

                        <div class="flex flex-row">
                            <div class="min-w-[70px]">Message:</div>
                            <div class="ms-2">@err.FriendlyMsg</div>
                        </div>

                        <div class="flex flex-row">
                            <div class="min-w-[70px]">Values:</div>
                            <div class="ms-2">@err.ValueInError</div>
                        </div>
                    </div>
                }
            </div>
        </div>
    </div>
</div>

@code {
    private IJSObjectReference? _jsModule = default!;
    private string _alertId = $"alert-backend-{Guid.NewGuid()}";
    private string _detailId = $"error-detail-{Guid.NewGuid()}";
    private string _firendlyUserMsg = "Error on the server, pls come back later and retry...";
    private ProblemDetailsContract _currentError = new();

    protected override void OnInitialized()
    {
        base.OnInitialized();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            _jsModule = await JS.InvokeAsync<IJSObjectReference>(
                "import", "./Components/Common/Alerts/ErrBackendApi.razor.js");
        }
    }

    public async Task ShowErrorDetailsAsync()
    {
        await _jsModule!.InvokeVoidAsync("showErrorDetails", _detailId);
    }

    public async Task DismissErrorAsync()
    {
        await _jsModule!.InvokeVoidAsync("dismissError", _alertId);
    }

    public async Task ShowErrorAsync(HttpResponseMessage? errorResponse = null)
    {
        if (errorResponse == null)
        {
            _currentError = GenerateStandardError();
        }
        else
        {
            try
            {
                _currentError = await errorResponse.Content.ReadFromJsonAsync<ProblemDetailsContract>()
                        ?? GenerateStandardError((int)errorResponse.StatusCode);

            }
            catch
            {
                _currentError = GenerateStandardError((int)errorResponse.StatusCode);
            }
        }

        StateHasChanged();
        await _jsModule!.InvokeVoidAsync("showError", _alertId);
    }

    private ProblemDetailsContract GenerateStandardError(int statusCode = 500)
    {
        return new()
            {
                Title = "Unamanaged Error",
                Status = statusCode,
                Errors = new[]
                    {
                        new ProblemDetailErrorContract
                        {
                            Code = "UNMANAGED_ERROR"
                                    ,
                            FriendlyMsg = "Internal server error, pls come back later and retry..."
                                    ,
                            ValueInError = string.Empty
                        }
    }
            };
    }
}
