@inject IJSRuntime JS
<dialog id="@_dialogId" tabindex="-1" class="bg-white/60 dark:bg-gray-900/80 overflow-y-auto overflow-x-hidden fixed top-0 right-0 left-0 z-40 justify-center items-center w-full md:inset-0 h-[calc(100%-1rem)] max-h-full max-w-full">
    <div class="flex row w-full sm:m-auto p-4 w-full h-full max-w-md max-h-full">
        <div class="m-auto bg-white relative rounded-lg shadow dark:bg-gray-700">
            <button type="button" class="absolute top-3 end-2.5 text-gray-400 bg-transparent hover:bg-gray-200 hover:text-gray-900 rounded-lg text-sm w-8 h-8 ms-auto inline-flex justify-center items-center dark:hover:bg-gray-600 dark:hover:text-white" data-modal-hide="popup-modal">
                <svg class="w-3 h-3" aria-hidden="true" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 14 14">
                    <path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="m1 1 6 6m0 0 6 6M7 7l6-6M7 7l-6 6" />
                </svg>
                <span class="sr-only">Close modal</span>
            </button>
            @ChildContent
        </div>
    </div>
</dialog>

@code {
    [Parameter]
    public RenderFragment? ChildContent { get; set; }

    private string _dialogId = $"dialog-delete-{Guid.NewGuid().ToString()}";
    private IJSObjectReference? _jsModule = default!;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            _jsModule = await JS.InvokeAsync<IJSObjectReference>(
                "import", "./Components/Common/Modal/UbikModalCenter.razor.js");
        }
    }

    public async Task ShowDialog()
    {
        await _jsModule!.InvokeVoidAsync("openDialogDelete", _dialogId);
    }
}
